# Generated by Selenium IDE
import pytest
import time
import json
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.options import Options

ABSENT = 0
EXIST = 1

class TestDefaultSuite():
  def setup_method(self, method):    
    self.options=Options()
    #self.options.headless = True
    self.chrome = webdriver.Chrome('/usr/lib/chromium-browser/chromedriver', options=self.options)
    self.chrome.set_window_size(1200, 1000)  
    self.vars = {}

  def teardown_method(self, method):
    self.chrome.quit()
  
  def Log(self, string):
     f = open("Log_File_defaultSuite", "a")
     f.write(string+"\n")
     f.close()
  
  def test_Main(self):    
    self.CommandOneItemAsClient()
    self.WaiterAcceptOrder()
    self.ChefPrepareOrder()
    self.WaiterAckOrder()
    self.PayCommandClient()
   

  def CheckIfElementExists(self,elementID):
    try:
      self.chrome.find_element_by_id(elementID)
      return EXIST
    except :
      return ABSENT

  def ClickOn(self,elementId,times=1):
    retry=0    
    while retry <3 :
      if self.CheckIfElementExists(elementId) is not ABSENT:
        self.Log(elementId+"- Waiting to be clickable")
        WebDriverWait(self.chrome, 30).until(expected_conditions.element_to_be_clickable((By.ID,elementId)))
        while times>0:
          self.Log(elementId+"- click ")
          self.chrome.find_element_by_id(elementId).click()
          times-=1
          time.sleep(1)
        break
      else :
        retry+=1
        self.Log(elementId+" does not exist - retry number "+ str(retry)+"/3")
        time.sleep(5)
    return None

  def SetUsername(self,username):
    elementId = 'waiter_login_username'
    if self.CheckIfElementExists(elementId) is not ABSENT:
      self.Log(elementId+"- Waiting to be clickable")
      WebDriverWait(self.chrome, 30).until(expected_conditions.element_to_be_clickable((By.ID,elementId)))
      element = self.chrome.find_element_by_id(elementId)    
      time.sleep(1)
      element.find_element_by_tag_name("input").send_keys(username)
      time.sleep(2)
    else :
      self.Log(elementId+" does not exist")
      return None
    
  def SetPassword(self,password):
    elementId = 'waiter_login_password'
    if self.CheckIfElementExists(elementId) is not ABSENT:
      self.Log(elementId+"- Waiting to be clickable")
      WebDriverWait(self.chrome, 30).until(expected_conditions.element_to_be_clickable((By.ID,elementId)))
      element = self.chrome.find_element_by_id(elementId)    
      time.sleep(1)
      element.find_element_by_tag_name("input").send_keys(password)
      time.sleep(2)
    else :
      self.Log(elementId+" does not exist")
      return None      
    
  def LogoutWaiter(self):
    self.ClickOn('tasks_menu_toggle')
    self.ClickOn('waiter_sidebar_Logout')
  
  def LoginWaiter(self,username):
    password = "pass"
    self.SetUsername(username)
    self.SetPassword(password)
    self.ClickOn("waiter_login_submit")

  def CommandOneItemAsClient(self):
    
    self.chrome.get("http://localhost:8100")    

    self.ClickOn("welcome-start-button")
    self.ClickOn("menu_item_5027b652-6847-408e-94f2-a0799dc9b77c")    

    element = self.chrome.find_element_by_id("oder_item_customization_instructions")
    time.sleep(2)
    element.find_element_by_tag_name("textarea").send_keys("Fara ceapa...asdasdada, va rog!")

    self.ClickOn("oder_item_customization_increase_quantity",4)
    self.ClickOn("oder_item_customization_decrease_quantity")
    
    self.ClickOn('oder_item_customization_add_to_order')
    self.ClickOn('order_button_update_order')
    self.ClickOn('restaurant_swipe_right')
    self.ClickOn('restaurant_swipe_left')
  
    time.sleep(5)

  def AbandonClientSession(self):    
    self.chrome.get("http://localhost:8100")    
    self.chrome.set_window_size(945, 1031)   
    WebDriverWait(self.chrome, 30).until(expected_conditions.element_to_be_clickable((By.ID,"welcome-abandon-button")))
    self.chrome.find_element_by_id("welcome-abandon-button").click()

  def WaiterAcceptOrder(self):
    username="waiter"
    self.chrome.get("http://localhost:8101")
   
    if self.CheckIfElementExists("tasks_menu_toggle") is not ABSENT:
      loggedUser = self.chrome.find_element_by_id("app_user_role")      
      if username not in loggedUser.text:
        self.LogoutWaiter()
        self.LoginWaiter(username)
    else:    
      self.LoginWaiter(username)
    time.sleep(5)
    self.ClickOn('task_acknowledge')
    self.ClickOn('task_assign_to_me')
    self.ClickOn('task_verified')
    self.ClickOn('tasks_menu_toggle')
    self.ClickOn('waiter_sidebar_Logout')
    time.sleep(5)

  def ChefPrepareOrder(self):
    username = "chef"
    password = "pass"
    self.chrome.get("http://localhost:8101") 

    if self.CheckIfElementExists("tasks_menu_toggle") is not ABSENT:
      loggedUser = self.chrome.find_element_by_id("app_user_role")      
      if username not in loggedUser.text:
        self.LogoutWaiter()
        self.LoginWaiter(username)
    else:    
      self.LoginWaiter(username)
    time.sleep(5)
    self.ClickOn('task_acknowledge')
    self.ClickOn('task_done')
    self.ClickOn('tasks_menu_toggle')
    self.ClickOn('waiter_sidebar_Logout')
    time.sleep(5)  

  def WaiterAckOrder(self):
    username = "waiter"
    password = "pass"
    self.chrome.get("http://localhost:8101") 

    if self.CheckIfElementExists("tasks_menu_toggle") is not ABSENT:
      #get logged user
      loggedUser = self.chrome.find_element_by_id("app_user_role")      
      if username not in loggedUser.text:
        self.LogoutWaiter()
        self.LoginWaiter(username)
    else:    
      self.LoginWaiter(username)
    time.sleep(5)
    self.ClickOn('task_acknowledge')
    self.ClickOn('task_done')
    self.ClickOn('tasks_menu_toggle')
    self.ClickOn('waiter_sidebar_Logout')    
    time.sleep(5)

  def PayCommandClient(self):    
    self.chrome.get("http://localhost:8100")   
    time.sleep(3)
    self.ClickOn('welcome-start-button')
    self.ClickOn('restaurant_swipe_left')
    self.ClickOn('order_button_pay_button')
    self.ClickOn('payment_radio_Cash')
    self.ClickOn('payment_confirm')
    time.sleep(10)
    